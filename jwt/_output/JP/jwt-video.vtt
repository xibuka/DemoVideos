WEBVTT

00:01.100 --> 00:08.236
このビデオでは、JWTプラグインを使用してAPIを保護する方法を紹介します。

00:09.940 --> 00:28.917
まず、デモのためにechoというAPIを指すサービスを作成します。ここでは httpbin という public HTTP Request & Response Service を使用します。サブパスは /anything とし、リクエストと同じレスポンスになるようにしました。

00:30.140 --> 00:42.637
次に、このサービスに外部からアクセスできるように、ルートを作成します。ここではパスを /demo とし、このパスでこの API にアクセスできるようにします。

00:43.860 --> 01:02.467
Kong Gatewayを使ってhttpbinサーバにアクセスしてみます。kongゲートウェイインスタンスのポート8000に、ルートで設定したサブパス/demoを指定してリクエストを送ります。200のレスポンスが返ってきたので、設定はうまくいっているようです。

01:03.699 --> 01:23.245
では、サービスレベルでJWT Pluginを有効にしてみましょう。このデモでは、すべてのデフォルト設定を維持したまま、インストールをクリックすることにします。キークレーム名が ISS であることに注意してください、トークン作成時に使用します。

01:24.460 --> 01:32.571
もう一度APIにアクセスしてみましょう。有効なトークンがないので、今度はブロックされました。

01:33.780 --> 01:42.990
次に、有効なJWTトークンの作成に取りかかりましょう。まず、Joeというコンシューマーを作成します。

01:44.220 --> 02:09.322
次に、JoeのためにJWTクレデンシャルを作成します。キーとシークレットは空欄にしておくと、Kongが生成してくれます。JWTプラグインは、トークンの署名を検証するためにいくつかのアルゴリズムを使用することができます。このデモでは、デフォルトのHS256を使用することにします。

02:10.522 --> 02:24.820
セキュリティの関係上、シークレットはGUIに表示されません。CLIでAdmin APIから確認することができます。このキーとシークレットを使って、トークンを作成します。

02:26.060 --> 02:35.877
JWTプラグインには、自分の認証情報を使うこともできます。キーとシークレットのフィールドに入力するだけです、

02:39.077 --> 02:43.500
また、Admin APIで確認することもできます。

02:44.740 --> 02:56.236
jwt.ioでトークンを作成することができます。Payload sectionにissという新しいフィールドを追加し、JWTクレデンシャルのキーの値を入力します。 そして、verify signatureセクションでsecretを入力します。トークンはページの左側で取得することが

02:56.436 --> 03:07.932
できます。

03:09.140 --> 03:23.980
このトークンを使って、もう一度APIにアクセスしてみましょう。トークンをコピーして、authorizationヘッダーにBearerトークンとして追加してください。今度は正常にアクセスできるはずです。

03:25.180 --> 03:38.570
jwtプラグインを使用すると、非常に簡単にAPIを保護するのに役立ちます。また、JSON Web Tokenを様々なアルゴリズムで検証することができます。
